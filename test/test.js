// const { Anext} = require("credentialGenerator");
const {block, issueCredential, accumulate, calculateWitness, calculateRoot, challenge, response} = require("../src/credentialGenerator");
var assert = require('assert');

// Merkle tree leaves.
const leaves = [
    20636625426020718969131298365984859231982649550971729229988535915544421356929n, //A0
    19692351381509008526674869164028204674581562778678059238007466345850648512859n, //A1
    3260317181256834846140115039123589072259884931802311535649272369690470859820n,  //A2
    12559855626748052907876877964709605782913587798297964389509937561042131488444n, //A3
    9293363803876686890705584793074152013070937946762690785125371091818451325249n,  //A4
    18986613911141877111059303650428624479276914537821274094557926354566801070694n, //A5
    6594576977337024810605280205881676376455522480400910569161130375729796322297n,  //A6
    13281023939982560411348601652777847345973472192043949548370725934383906399361n, //A7
    7455278944954866418836366694791383055917545224687928003145285008456395087672n,  //A8
    1213856726369934280347171009173534548427863030671371843792820420333011250756n,  //A9
    2380547835869466608358205008815195360499221128399310971635383412564068579244n,  //A10
    8299559464105167209482322694522697329548520636870909653503467836670813977401n,  //A11
    16819457404953781318509876520657929952860175851320045696106603468343197921610n, //A12
    20636625426020718969131298365984859231982649550971729229988535915544421356929n, //A0
    20636625426020718969131298365984859231982649550971729229988535915544421356929n, //A0
    20636625426020718969131298365984859231982649550971729229988535915544421356929n  //A0
];
// Index of 7th attendee.
const j = 7;

// Secret value of 7th attendee.
const x = 357001038922751987465902569515014383300682161621672054341726151297170389834n;

//6th block.
const Aprev = 6594576977337024810605280205881676376455522480400910569161130375729796322297n;

// Domain name of service in ascii.
const name = 10411611611211558474711211111246100101100105115469910447n;

// 7th block.
const Anext = block(x, Aprev);

const merkleRoot = accumulate(leaves);

// Credential.
const PoP = issueCredential(merkleRoot, x, Anext);

// Challenge.
const c = challenge(name);

// Response.
const r = response(x, c);

// Number of leaves.
const l = leaves.length;

// Merkle path.
let witness = new Array(Math.log2(l)+1); 
witness = calculateWitness(leaves, j);

// Merkle Root calculated using the witness.
const calculatedRoot = calculateRoot(witness, j);


// Testing if above values are equal to those of the arithemtic circuits.
assert.strictEqual(merkleRoot, 19992385035414375752682634936166848973246091313271311815731550228691016173679n); 
assert.strictEqual(PoP, 11479905877971356667606273769681907915507957593594585550532071644121966709385n); 
assert.strictEqual(c, 5408261423878659587496614652789751506801681533873101339841310084393472575208n);
assert.strictEqual(r, 17443341406890936967489080755732329869002606737135159570082013263980965528882n);
assert.strictEqual(calculatedRoot, merkleRoot);
